<?php
/* vim: syntax=php tabstop=3 shiftwidth=3
 *
 * Import filter for AIRT, parsing NfSen Alert mails.
 * Copyright (C) 2018 Gijs Rijnders, SURFnet, The Netherlands

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */
require_once 'Mail/mimeDecode.php';

function filter_nfsenmailer_getVersion()
{
   return "1.0";
}

/* Filter function */
function filter_nfsenmailer($input, &$output, $verbosity=FALSE)
{
   // Take out date and time from the mail headers.
   $matches = array();
   $data = array('srcip'=>'', 'logging'=>'', 'datetime'=>'');
   if (preg_match('/^Date: (.*)$/m', $input, $matches)) {
      $data['datetime'] = $matches[1];
   }

   // Parse input.
   $text = explode("\n", $input);
   $body_found = false;
   foreach ($text as $line)
   {
      if (substr($line, 0, 5) == "Alert")
      {
         $csvfields = explode(",", $line);
         $data['srcip'] = $csvfields[1] . "(" . $csvfields[2] . ")";
      }
      else if (substr($line, 0, 6) == "Source")
      {
         $body_found = true;
      }

      // Append the body text to the logging variable.
      if ($body_found)
      {
         $data['logging'] .= $line . "\n";
      }
   }

   // Build up output for AIRT incident.
   $output = '<airt>'."\n";
   $output .= "  <queuedata filter=\"filter_nfsenmailer\" version=\"".
	   filter_nfsenmailer_getVersion()."\" ref=\"#1\">\n";
   $output .= "     <status>open</status>\n";
   $output .= "     <sender>NfSen Alert Mailer</sender>\n";
   $output .= "     <type>denial</type>\n";
   $output .= "     <summary>Hmm, wat moet hier staan?</summary>\n";
   $output .= "  </queuedata>\n";
   $output .= "  <incident id=\"1\">\n";
   $output .="    <ticketInformation>\n";
   $output .="      <prefix>NfSen Mailer</prefix>\n";
   $output .="    </ticketInformation>\n";
   $output .="    <technicalInformation>\n";
   $output .="      <ip>$data[srcip]</ip>\n";
   $output .="      <incident_time>$data[datetime]</incident_time>\n";
   $output .="      <logging>".htmlentities($data[logging])."</logging>\n";
   $output .="   </technicalInformation>\n";
   $output .="  </incident>\n";
   $output .= "</airt>\n";

   if ($verbosity == true)
   {
      print "$output";
   }

   return 0;
}

/*function filter_spamcop($input, &$output, $verbosity=FALSE) {
   $matches = array();
   $data = array('srcip'=>'', 'logging'=>'', 'datetime'=>'');
   if (preg_match('/^Date: (.*)$/m', $input, $matches)) {
      $data['datetime'] = $matches[1];
   }
   $text = explode("\n", $input);
   $body = 0;
   for ($i=0; $i<sizeof($text); $i++) {
      if (trim($text[$i]) == '') {
         $body++;
         continue;
      }
      if ($body >= 1 && $body <= 2) {
         $data['logging'] .= "\n".$text[$i];
      }
   }
   if (preg_match('/(Email|Unsolicited bounce) from:? ([0-9.]+)/', $input, $matches)) {
      $data['srcip'] = $matches[2];
   }
   $output = '<airt>'."\n";
   $output .= "  <queuedata filter=\"filter_spamcop\" version=\"".
	   filter_spamcop_getVersion()."\" ref=\"#1\">\n";
   $output .= "     <status>open</status>\n";
   $output .= "     <sender>SpamCop</sender>\n";
   $output .= "     <type>SpamCop report</type>\n";
   $output .= "     <summary>SpamCop $data[srcip]</summary>\n";
   $output .= "  </queuedata>\n";
   $output .= "  <incident id=\"1\">\n";
   $output .="    <ticketInformation>\n";
   $output .="      <prefix>SpamCop</prefix>\n";
   $output .="    </ticketInformation>\n";
   $output .="    <technicalInformation>\n";
   $output .="      <ip>$data[srcip]</ip>\n";
   $output .="      <incident_time>$data[datetime]</incident_time>\n";
   $output .="      <logging>".htmlentities($data[logging])."</logging>\n";
   $output .="   </technicalInformation>\n";
   $output .="  </incident>\n";
   $output .= "</airt>\n";

   if ($verbosity == true) {
      print "$output";
   }
   return 0;
}*/

?>
